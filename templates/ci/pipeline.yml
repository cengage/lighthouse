---
#
# ci/pipeline.yml
#
# Pipeline structure file for a Genesis Release pipeline
#
# DO NOT MAKE CHANGES TO THIS FILE.  Instead, modify
# ci/settings.yml and override what needs overridden.
# This uses spruce, so you have some options there.
#
# author:  James Hunt <james@niftylogic.com>
# created: 2018-01-23

meta:
  envname:  (( param "Please provide an environment name for bosh and the safe paths" ))
  target:   (( param "Please identify the name of the target Concourse CI" ))
  url:      (( param "Please specify the full url of the target Concourse CI" ))
  pipeline: (( concat "lighthouse-" meta.envname ))

  bosh:
    ip:    (( Param "Please provide the address of the BOSH director" ))

  vault:
    url:   (( param "Please provide the address of your Vault" ))
    token: (( param "Please provide a Vault Token" ))
    path : (( param "Please provide a Vault path/prefix such as 'secret/lab'"  ))

  image:
    name: starkandwayne/genesis_ci
    tag: latest

  git:
    email: ci@starkandwayne.com
    name:  Stark & Wayne CI Bot

  lighthouse_github:
    source:       (( param "Please specify the source of repository (such as git@github.com)" ))
    owner:        (( param "Please specify the name of the user / organization that owns the Github repository" ))
    repo:         (( param "Please specify the name of the Github repository" ))
    branch:       (( param "Please specify the branch of the repository" ))
    private_key:  (( param "Please generate an SSH Deployment Key for this repo and specify it here" ))
    uri:          (( concat meta.lighthouse_github.source ":" meta.lighthouse_github.owner "/" meta.lighthouse_github.repo ))

  configs_github:
    source:       (( param "Please specify the source of repository (such as git@github.com)" ))
    owner:        (( param "Please specify the name of the user / organization that owns the Github repository" ))
    repo:         (( param "Please specify the name of the Github repository" ))
    branch:       (( param "Please specify the branch of the repository" ))
    private_key:  (( param "Please generate an SSH Deployment Key for this repo and specify it here" ))
    uri:          (( concat meta.configs_github.source "/" meta.configs_github.owner "/" meta.configs_github.repo ))

  params:
    VAULT_ADDR:             (( grab meta.vault.url ))
    VAULT_ALIAS:            (( grab meta.envname ))
    VAULT_PATH:             (( grab meta.vault.path ))
    VAULT_TOKEN:            (( grab meta.vault.token ))
    VAULT_SKIP_VERIFY:      (( grab meta.vault.skip_verify ))
    BASE_ENV:               (( grab meta.envname ))
    BASE_TYPE:              (( grab meta.basetype ))
    BOSH_CA_CERT:           (( grab meta.bosh.ca ))
    BOSH_CLIENT:            (( grab meta.bosh.client ))
    BOSH_CLIENT_SECRET:     (( grab meta.bosh.client_secret ))
    BOSH_ALIAS:             (( grab meta.envname ))
    BOSH_IP:                (( grab meta.bosh.ip ))
    CF_SKIP_SSL_VALIDATION: (( grab meta.cf.skip_ssl ))
    CF_USERNAME:            (( grab meta.cf.username ))
    CF_PASSWORD:            (( grab meta.cf.password ))
    CF_API:                 (( grab meta.cf.api ))
    CF_ORG:                 (( grab meta.cf.org ))
    CF_SPACE:               (( grab meta.cf.space ))

#groups:
#  - name: (( grab meta.pipeline ))
#    jobs:
#      - vault-test
#      - cf-login-test
#      - bosh-login-test
#      - cf-test
#      - bosh-test

jobs:
- name: vault-test
  public: true
  plan:
  - name: main
    do:
    - name: get
      aggregate:
      - { get: lh_git, trigger: true }
      - { get: configs_git, trigger: true }
    - name: testflights
      aggregate:
      - name: testflight
        task: testflight
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: (( grab meta.image.name ))
              tag:        (( grab meta.image.tag ))
          inputs:
            - { name: lh_git,     path: lighthouse }
            - { name: configs_git, path: configs }
          run:
            path: ./templates/ci/scripts/check_safe
            args: []
            dir: ./lighthouse
          params:
            (( grab meta.params ))
- name: cf-login-test
  public: true
  plan:
  - name: cftest
    do:
    - get: configs_git 
      passed: [ vault-test ]
      trigger: true
    - get: lh_git 
      passed: [ vault-test ]
      trigger: true
    - task: cflogin
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: (( grab meta.image.name ))
            tag:        (( grab meta.image.tag ))
        inputs:
          - { name: lh_git,     path: lighthouse }
          - { name: configs_git, path: configs }
        run:
          path: ../lighthouse/bin/lh
          args:  [ login, (( grab meta.envname )), cf ]
          dir: ./configs
        params:
          (( grab meta.params ))
- name: cf-orgs-test
  public: true
  plan:
  - name: main
    do:
    - get: configs_git
      passed: [ cf-login-test ]
      trigger: true
    - get: lh_git
      passed: [ cf-login-test ]
      trigger: true
    - task: cflogin
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: (( grab meta.image.name ))
            tag:        (( grab meta.image.tag ))
        inputs:
          - { name: lh_git,     path: lighthouse }
          - { name: configs_git, path: configs }
        run:
          path: ../lighthouse/bin/lh
          args: [ run , (( grab meta.envname )), cf/orgs.sh ]
          dir: ./configs
        params:
          (( grab meta.params ))
- name: cf-spaces-test
  public: true
  plan:
  - name: main
    do:
    - get: configs_git
      passed: [ cf-login-test ]
      trigger: true
    - get: lh_git
      passed: [ cf-login-test ]
      trigger: true
    - task: cflogin
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: (( grab meta.image.name ))
            tag:        (( grab meta.image.tag ))
        inputs:
          - { name: lh_git,     path: lighthouse }
          - { name: configs_git, path: configs }
        run:
          path: ../lighthouse/bin/lh
          args: [ run , (( grab meta.envname )), cf/spaces.sh ]
          dir: ./configs
        params:
          (( grab meta.params ))
- name: cf-apps-test
  public: true
  plan:
  - name: main
    do:
    - get: configs_git
      passed: [ cf-login-test ]
      trigger: true
    - get: lh_git
      passed: [ cf-login-test ]
      trigger: true
    - task: cflogin
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: (( grab meta.image.name ))
            tag:        (( grab meta.image.tag ))
        inputs:
          - { name: lh_git,     path: lighthouse }
          - { name: configs_git, path: configs }
        run:
          path: ../lighthouse/bin/lh
          args: [ run , (( grab meta.envname )) , cf/apps.sh ]
          dir: ./configs
        params:
          (( grab meta.params ))
- name: cf-buildpacks-test
  public: true
  plan:
  - name: main
    do:
    - get: configs_git
      passed: [ cf-login-test ]
      trigger: true
    - get: lh_git
      passed: [ cf-login-test ]
      trigger: true
    - task: cflogin
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: (( grab meta.image.name ))
            tag:        (( grab meta.image.tag ))
        inputs:
          - { name: lh_git,     path: lighthouse }
          - { name: configs_git, path: configs }
        run:
          path: ../lighthouse/bin/lh
          args: [ run , (( grab meta.envname )) , cf/buildpacks.sh ]
          dir: ./configs
        params:
          (( grab meta.params ))
- name: bosh-login-test          
  public: true
  plan:
  - name: main
    do:
    - get: configs_git
      passed: [ vault-test ]
      trigger: true
    - get: lh_git
      passed: [ vault-test ]
      trigger: true
    - task: bosh-login-test
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: (( grab meta.image.name ))
            tag:        (( grab meta.image.tag ))
        inputs:
          - { name: lh_git,     path: lighthouse }
          - { name: configs_git, path: configs }
        run:
          path: ../lighthouse/bin/lh
          args: [ login, (( grab meta.envname )), bosh ]
          dir: ./configs
        params:
          (( grab meta.params ))
- name: bosh-tests
  public: true
  plan:
  - name: main
    do:
    - get: configs_git
      passed: [ bosh-login-test ]
      trigger: true
    - get: lh_git
      passed: [ bosh-login-test ]
      trigger: true
    - task: bosh-tests
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: (( grab meta.image.name ))
            tag:        (( grab meta.image.tag ))
        inputs:
          - { name: lh_git,     path: lighthouse }
          - { name: configs_git, path: configs }
        run:
          path: ../lighthouse/bin/lh
          args: [ test ,(( grab meta.envname )),  bosh ]
          dir: ./configs
        params:
          (( grab meta.params ))

resources:
  - name: lh_git
    type: git
    source:
      uri:         (( grab meta.lighthouse_github.uri ))
      branch:      (( grab meta.lighthouse_github.branch ))
      private_key: (( grab meta.lighthouse_github.private_key ))

  - name: configs_git
    type: git
    source:
      uri:         (( grab meta.configs_github.uri ))
      branch:      (( grab meta.configs_github.branch ))
      private_key: (( grab meta.configs_github.private_key ))

